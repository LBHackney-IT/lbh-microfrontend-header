version: 2.1

orbs:
    aws-s3: circleci/aws-s3@2.0.0
    aws-cli: circleci/aws-cli@2.0.0
    aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

parameters:
    run_development_workflow:
        default: true
        type: boolean

    run_staging_workflow:
        default: false
        type: boolean
    
    run_production_workflow:
        default: false
        type: boolean

    run_temporary_workflow:
        default: false
        type: boolean

    dont_run_for_now:
        default: false
        type: boolean

references:
    workspace_root: &workspace_root '~'
    attach_workspace: &attach_workspace
        attach_workspace:
            at: *workspace_root

executors:
    node-executor:
        docker:
            - image: circleci/node:14.15.4-browsers
    docker-terraform:
        docker:
            - image: "hashicorp/terraform:light"

commands:
    assume-role-and-persist-workspace:
        description: "Assume deployment role and persist credentials across jobs"
        parameters:
            aws-account:
                type: string
        steps:
            - checkout
            - aws_assume_role/assume_role:
                  account: <<parameters.aws-account>>
                  profile_name: default
                  role: "LBH_Circle_CI_Deployment_Role"
            - persist_to_workspace:
                  root: *workspace_root
                  paths:
                      - .aws

    terraform-init-then-apply:
        description: "Initialize and apply the terraform configuration"
        parameters:
            environment:
                type: string
        steps:
            - *attach_workspace
            - checkout
            - run:
                  name: get and init
                  command: |
                      cd ./terraform/<<parameters.environment>>/
                      terraform get -update=true
                      terraform init
            - run:
                  name: apply
                  command: |
                      cd ./terraform/<<parameters.environment>>/
                      terraform apply -auto-approve
jobs:
    install-dependencies:
        executor: node-executor
        steps:
            - *attach_workspace
            - checkout
            - restore_cache:
                  key: dependency-cache-{{ checksum "yarn.lock" }}
            - run:
                  name: Install dependencies
                  command: yarn
            - save_cache:
                  key: dependency-cache-{{ checksum "yarn.lock" }}
                  paths:
                      - ./node_modules
            - persist_to_workspace:
                  root: *workspace_root
                  paths: .
    lint-and-test:
        executor: node-executor
        steps:
            - *attach_workspace
            - run:
                  name: Run linter
                  command: yarn lint
            - run:
                  name: Run unit lint-and-test
                  command: yarn test
    build-deploy-development:
        executor: node-executor
        environment:
            aws-region: eu-west-2
        parameters:
            stage:
                type: string
        steps:
            - *attach_workspace
            - aws-cli/install
            - run:
                name: build
                command: yarn build
            - run:
                  name: Deploy to S3
                  command: aws s3 sync dist s3://lbh-housing-tl-header-frontend-development.hackney.gov.uk/
    build-deploy-staging:
        executor: node-executor
        environment:
            aws-region: eu-west-2
        parameters:
            stage:
                type: string
        steps:
            - *attach_workspace
            - aws-cli/install
            - run:
                name: build
                command: yarn build
            - run:
                  name: Deploy to S3
                  command: aws s3 sync dist s3://lbh-housing-tl-header-frontend-staging.hackney.gov.uk/
    build-deploy-production:
        executor: node-executor
        environment:
            aws-region: eu-west-2
        parameters:
            stage:
                type: string
        steps:
            - *attach_workspace
            - aws-cli/install
            - run:
                name: build
                command: yarn build
            - run:
                  name: Deploy to S3
                  command: aws s3 sync dist s3://lbh-housing-tl-header-frontend-production.hackney.gov.uk/

    assume-role-development:
        executor: node-executor
        steps:
            - assume-role-and-persist-workspace:
                  aws-account: $AWS_ACCOUNT_DEVELOPMENT

    assume-role-staging:
        executor: node-executor
        steps:
            - assume-role-and-persist-workspace:
                  aws-account: $AWS_ACCOUNT_STAGING

    assume-role-production:
        executor: node-executor
        steps:
            - assume-role-and-persist-workspace:
                  aws-account: $AWS_ACCOUNT_PRODUCTION

    terraform-init-and-apply-to-development:
        executor: docker-terraform
        steps:
            - terraform-init-then-apply:
                  environment: "development"

    terraform-init-and-apply-to-staging:
        executor: docker-terraform
        steps:
            - terraform-init-then-apply:
                  environment: "staging"

    terraform-init-and-apply-to-production:
        executor: docker-terraform
        steps:
            - terraform-init-then-apply:
                  environment: "production"
    
    trigger-e2e-pipeline:
        docker:
        - image: cimg/base:2021.05
        steps:
        - run: |
                case << pipeline.parameters.run_development_workflow >> in
                (true) export DEPLOYMENT_ENVIRONMENT='development_environment' ;;
                esac
                case << pipeline.parameters.run_staging_workflow >> in
                (true) export DEPLOYMENT_ENVIRONMENT='staging_environment' ;;
                esac
                case << pipeline.parameters.run_production_workflow >> in
                (true) export DEPLOYMENT_ENVIRONMENT='production_environment' ;;
                esac
                curl --location --request POST 'https://circleci.com/api/v2/project/gh/LBHackney-IT/mtfh-tl-e2e-tests/pipeline' \
                --header 'Circle-Token: '"$CIRCLE_TOKEN"'' \
                --header 'Content-Type: application/json' \
                --data ' {"branch": "trigger_workflow_via_api", "parameters": {"run_workflow_ci": false, "external_trigger": true, "external_pipeline": "header", '\""$DEPLOYMENT_ENVIRONMENT"\"': true}}'        

workflows:
    version: 2
    continuous-delivery-development:
        when: << pipeline.parameters.run_development_workflow >>
        jobs:
            - install-dependencies
            - lint-and-test:
                  requires:
                      - install-dependencies
            - assume-role-development:
                  context: api-assume-role-housing-development-context
                  requires:
                      - lint-and-test
                  filters:
                      branches:
                          only: main
            - terraform-init-and-apply-to-development:
                  requires:
                      - assume-role-development
                  filters:
                      branches:
                          only: main
            - build-deploy-development:
                  stage: "development"
                  requires:
                      - terraform-init-and-apply-to-development
                  filters:
                      branches:
                          only: main
            - trigger-e2e-pipeline:
                  requires:
                      - build-deploy-development
                  filters:
                      branches:
                          only: MTTL-856-configure-e2e-pipeline-trigger

    continuous-delivery-staging:
        when: << pipeline.parameters.dont_run_for_now >>
        jobs:
            - assume-role-staging:
                  context: api-assume-role-housing-staging-context
                  filters:
                      branches:
                          only: main
            - terraform-init-and-apply-to-staging:
                  requires:
                      - assume-role-staging
                  filters:
                      branches:
                          only: main
            - build-deploy-staging:
                  stage: "staging"
                  requires:
                      - terraform-init-and-apply-to-staging
                  filters:
                      branches:
                          only: main
            - trigger-e2e-pipeline:
                  requires:
                      - build-deploy-staging
                  filters:
                      branches:
                          only: MTTL-856-configure-e2e-pipeline-trigger

    continuous-delivery-production:
        when: << pipeline.parameters.dont_run_for_now >>
        jobs:   
            - permit-production-terraform-release:
                  type: approval
            - assume-role-production:
                  context: api-assume-role-housing-production-context
                  requires:
                      - permit-production-terraform-release
                  filters:
                      branches:
                          only: main
            - terraform-init-and-apply-to-production:
                  requires:
                      - assume-role-production
                  filters:
                      branches:
                          only: main
            - permit-deploy-production:
                  type: approval
                  requires:
                      - terraform-init-and-apply-to-production
            - build-deploy-production:
                  stage: "production"
                  requires:
                      - permit-deploy-production
                  filters:
                      branches:
                          only: main
            - trigger-e2e-pipeline:
                  requires:
                      - build-deploy-production
                  filters:
                      branches:
                          only: MTTL-856-configure-e2e-pipeline-trigger
        
    temporary-workflow-staging:
        when:
            and:
            - equal: [ << pipeline.parameters.run_temporary_workflow >> ]
            - or: [ << pipeline.parameters.run_staging_workflow >> ]
        jobs:
          - trigger-e2e-pipeline

    temporary-workflow-production:
        when:
            and:
            - equal: [ << pipeline.parameters.run_temporary_workflow >> ]
            - or: [ << pipeline.parameters.run_production_workflow >> ]
        jobs:
          - trigger-e2e-pipeline